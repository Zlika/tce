#!/bin/bash

######################################################
# Build script for OpenJDK 8                         #
#                                                    #
# This build script has been tested on Debian 8 i386 #
# and the resulting *.tcz on Tiny Core Linux 7.2.    #
#                                                    #
# Required build dependencies:                       #
# apt-get install mercurial squashfs-tools zsync     #
# apt-get install openjdk-8-jdk                      #
# apt-get build-dep openjdk-8                        #
#                                                    #
# Cf. http://zlika.github.io/presentations/          #
#            compile-openjdk8/slides_en.html         #
# for additional info on how to build OpenJDK        #
######################################################

######################################################
# Configure extension creation parameters            #
######################################################

VERSION_SRC=112
BUILD_SRC=16
HG_TAG=jdk8u$VERSION_SRC-b$BUILD_SRC
VERSION_TCZ=8u$VERSION_SRC-b$BUILD_SRC-1
WRKDIR=jdk8u
NAME=openjdk-8
EXTNAME_JRE=$NAME-jre
EXTNAME_JDK=$NAME-jdk
TMPDIR=`pwd`/tmp-tce
PREFIX=/usr/local
SCRIPT_PATH=`pwd`
TC_UID=1001
STAFF_GUID=50
ROOT_UID=0

######################################################
# Prepare extension creation                         #
######################################################

# Remove dirs and files left from previous creation
rm -r -f $TMPDIR
rm -r -f $WRKDIR

# Configure ARM / x86 / x86_64 build
if [ `uname -a | grep armv | wc -l` -eq "1" ];
then
   ARM="true"
   X64="false"
   echo "ARM build detected"
elif [ `uname -a | grep x86_64 | wc -l` -eq "1" ]
then
   ARM="false"
   X64="true"
   echo "x86_64 build detected"
else
   ARM="false"
   X64="false"
   echo "x86 build detected"
fi

# Copy *.info and *.dep files
mkdir -p $TMPDIR
if [ $ARM = "true" ];
then
   for i in *.tcz-arm.info; do cp $i $TMPDIR/${i/-arm/}; done
else
   cp *.tcz.info $TMPDIR
fi
cp *.tcz.dep $TMPDIR

# Download upstream source
hg clone http://hg.openjdk.java.net/jdk8u/jdk8u/ -r $HG_TAG
cd $WRKDIR
sh ./get_source.sh

######################################################
# Compile extension                                  #
######################################################

# Export variables needed for compilation
if [ $ARM = "true" ];
then
   export CFLAGS="-Os -pipe"
   export CXXFLAGS="-Os -pipe"
   VM_VARIANT=zero
   BUILD_FOLDER_NAME=linux-arm-normal-$VM_VARIANT-release
   BOOT_JDK=/usr/lib/jvm/java-8-openjdk-armhf
elif [ $X64 = "true" ]
then
   export CFLAGS="-march=x86-64 -Os -pipe"
   export CXXFLAGS="$CFLAGS"
   VM_VARIANT=server
   BUILD_FOLDER_NAME=linux-x86_64-normal-$VM_VARIANT-release
   BOOT_JDK=/usr/lib/jvm/java-8-openjdk-x86_64
else
   export CFLAGS="-march=i486 -mtune=i686 -Os -pipe"
   export CXXFLAGS="-march=i486 -mtune=i686 -Os -pipe"
   VM_VARIANT=minimal1
   BUILD_FOLDER_NAME=linux-x86-normal-$VM_VARIANT-release
   BOOT_JDK=/usr/lib/jvm/java-8-openjdk-i386
fi
export LDFLAGS="-Wl,-O1"
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig

# Configure source
sh ./configure \
--with-jvm-variants=$VM_VARIANT \
--with-boot-jdk=$BOOT_JDK \
--with-debug-level=release \
--disable-debug-symbols \
--disable-zip-debug-info \
--enable-unlimited-crypto \
--prefix="$PREFIX" \
--with-stdc++lib=dynamic \
--with-extra-cflags="$CFLAGS" \
--with-extra-cxxflags="$CXXFLAGS" \
--with-extra-ldflags="$LDFLAGS" \
--with-user-release-suffix="$VERSION_TCZ" \
--with-update-version=$VERSION_SRC \
--with-build-number=b$BUILD_SRC

if [ $? -ne 0 ]
then
   exit 1
fi


# Compile
make images COMPRESS_JARS=true
make profiles COMPRESS_JARS=true

# Install in base temp dir
mkdir -p $TMPDIR/$EXTNAME_JDK$PREFIX/$NAME
cp -r build/$BUILD_FOLDER_NAME/images/j2sdk-image/* $TMPDIR/$EXTNAME_JDK$PREFIX/$NAME
mkdir -p $TMPDIR/$EXTNAME_JRE$PREFIX/$NAME/jre
cp -r build/$BUILD_FOLDER_NAME/images/j2re-image/* $TMPDIR/$EXTNAME_JRE$PREFIX/$NAME/jre
for profile in compact1 compact2 compact3
do
    mkdir -p $TMPDIR/$EXTNAME_JRE-$profile$PREFIX/$NAME/jre
    cp -r build/$BUILD_FOLDER_NAME/images/j2re-$profile-image/* $TMPDIR/$EXTNAME_JRE-$profile$PREFIX/$NAME/jre
done

# Delete unneeded files
rm -f $TMPDIR/$EXTNAME_JDK$PREFIX/$NAME/release
rm -f $TMPDIR/$EXTNAME_JDK$PREFIX/$NAME/src.zip
rm -r -f $TMPDIR/$EXTNAME_JDK$PREFIX/$NAME/sample
rm -r -f $TMPDIR/$EXTNAME_JDK$PREFIX/$NAME/demo
rm -f $TMPDIR/$EXTNAME_JRE$PREFIX/$NAME/jre/release
for profile in compact1 compact2 compact3
do
    rm -f $TMPDIR/$EXTNAME_JRE-$profile$PREFIX/$NAME/jre/release
done
rm -r -f $TMPDIR/$EXTNAME_JRE$PREFIX/$NAME/jre/man

# Strip executables
find $TMPDIR | xargs file | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded

# Make TC specific changes
SCRIPT="#!/bin/sh\nsed -i -e 's%PATH=\"%PATH=\"$PREFIX/$NAME/jre/bin:%' /etc/profile\necho 'export JAVA_HOME=$PREFIX/$NAME/jre' >> /etc/profile"
for image in $EXTNAME_JDK $EXTNAME_JRE $EXTNAME_JRE-compact1 $EXTNAME_JRE-compact2 $EXTNAME_JRE-compact3
do
    mkdir -p $TMPDIR/$image$PREFIX/tce.installed
    echo $SCRIPT > $TMPDIR/$image$PREFIX/tce.installed/$image
done

# Move files to doc extension
mkdir -p $TMPDIR/$NAME-doc/usr/local/share
mv $TMPDIR/$EXTNAME_JDK$PREFIX/$NAME/man $TMPDIR/$NAME-doc$PREFIX/share

# Adjust directory access rigths and file owner
find $TMPDIR/* -type d | xargs chmod 755;
find $TMPDIR/* | xargs sudo chown -h $ROOT_UID:$ROOT_UID;
for image in $EXTNAME_JDK $EXTNAME_JRE $EXTNAME_JRE-compact1 $EXTNAME_JRE-compact2 $EXTNAME_JRE-compact3
do
    sudo chmod -R 775 $TMPDIR/$image$PREFIX/tce.installed
    sudo chown -R $TC_UID:$STAFF_GUID $TMPDIR/$image$PREFIX/tce.installed
done

###################################################
# Create extensions in temp dir                   #
###################################################

for image in $EXTNAME_JDK $EXTNAME_JRE $EXTNAME_JRE-compact1 $EXTNAME_JRE-compact2 $EXTNAME_JRE-compact3
do
    cd $TMPDIR
    mksquashfs $TMPDIR/$image $image.tcz -b 4k -no-xattrs
    cd $TMPDIR/$image
    find usr -not -type d > ../$image.tcz.list
    cd $TMPDIR

    # Create md5 file
    md5sum $image.tcz > $image.tcz.md5.txt

    # Update Size field in info file
    SIZE=$(du -h $image.tcz | cut -f 1)
    sed -i "s/^Size.*/Size:\t\t$SIZE/" $image.tcz.info

    # Create zsync file
    zsyncmake $image.tcz > /dev/null 2>&1

    # Create tarball
    tar cvfz $image.tar.gz $image.tcz*
done

###################################################
# Create doc extension in temp dir                #
###################################################

cd $TMPDIR
mksquashfs $TMPDIR/$NAME-doc $NAME-doc.tcz -b 4k -no-xattrs
cd $TMPDIR/$NAME-doc
find usr -not -type d > ../$NAME-doc.tcz.list
cd $TMPDIR

# Create md5 file
md5sum $NAME-doc.tcz > $NAME-doc.tcz.md5.txt

# Update Size field in info file
SIZE=$(du -h $NAME-doc.tcz | cut -f 1)
sed -i "s/^Size.*/Size:\t\t$SIZE/" $NAME-doc.tcz.info

# Create zsync file
zsyncmake $NAME-doc.tcz > /dev/null 2>&1

# Create tarball
tar cvfz $NAME-doc.tar.gz $NAME-doc.tcz*
